// Code generated by protoc-gen-go. DO NOT EDIT.
// source: node.proto

package buffs

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type DiscoverReq struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DiscoverReq) Reset()         { *m = DiscoverReq{} }
func (m *DiscoverReq) String() string { return proto.CompactTextString(m) }
func (*DiscoverReq) ProtoMessage()    {}
func (*DiscoverReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c843d59d2d938e7, []int{0}
}

func (m *DiscoverReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DiscoverReq.Unmarshal(m, b)
}
func (m *DiscoverReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DiscoverReq.Marshal(b, m, deterministic)
}
func (m *DiscoverReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DiscoverReq.Merge(m, src)
}
func (m *DiscoverReq) XXX_Size() int {
	return xxx_messageInfo_DiscoverReq.Size(m)
}
func (m *DiscoverReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DiscoverReq.DiscardUnknown(m)
}

var xxx_messageInfo_DiscoverReq proto.InternalMessageInfo

type DiscoverRes struct {
	// TODO: this may need to be changed to clients, listeners, and nodes or something; a map of network maps? idk if getting too complicated
	Nodes                []string `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DiscoverRes) Reset()         { *m = DiscoverRes{} }
func (m *DiscoverRes) String() string { return proto.CompactTextString(m) }
func (*DiscoverRes) ProtoMessage()    {}
func (*DiscoverRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c843d59d2d938e7, []int{1}
}

func (m *DiscoverRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DiscoverRes.Unmarshal(m, b)
}
func (m *DiscoverRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DiscoverRes.Marshal(b, m, deterministic)
}
func (m *DiscoverRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DiscoverRes.Merge(m, src)
}
func (m *DiscoverRes) XXX_Size() int {
	return xxx_messageInfo_DiscoverRes.Size(m)
}
func (m *DiscoverRes) XXX_DiscardUnknown() {
	xxx_messageInfo_DiscoverRes.DiscardUnknown(m)
}

var xxx_messageInfo_DiscoverRes proto.InternalMessageInfo

func (m *DiscoverRes) GetNodes() []string {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func init() {
	proto.RegisterType((*DiscoverReq)(nil), "buffs.DiscoverReq")
	proto.RegisterType((*DiscoverRes)(nil), "buffs.DiscoverRes")
}

func init() {
	proto.RegisterFile("node.proto", fileDescriptor_0c843d59d2d938e7)
}

var fileDescriptor_0c843d59d2d938e7 = []byte{
	// 175 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xca, 0xcb, 0x4f, 0x49,
	0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4d, 0x2a, 0x4d, 0x4b, 0x2b, 0x96, 0xe2, 0x29,
	0x4e, 0xcd, 0x4b, 0x49, 0x2d, 0x82, 0x08, 0x4a, 0x71, 0x15, 0xa5, 0x26, 0x97, 0x41, 0xd8, 0x4a,
	0xbc, 0x5c, 0xdc, 0x2e, 0x99, 0xc5, 0xc9, 0xf9, 0x65, 0xa9, 0x45, 0x41, 0xa9, 0x85, 0x4a, 0xca,
	0xc8, 0xdc, 0x62, 0x21, 0x11, 0x2e, 0x56, 0x90, 0x61, 0xc5, 0x12, 0x8c, 0x0a, 0xcc, 0x1a, 0x9c,
	0x41, 0x10, 0x8e, 0xd1, 0x14, 0x46, 0x2e, 0x16, 0xbf, 0xfc, 0x94, 0x54, 0x21, 0x0d, 0x2e, 0x96,
	0xe0, 0xd4, 0xbc, 0x14, 0x21, 0x3e, 0x3d, 0xb0, 0x35, 0x7a, 0x20, 0x4e, 0x50, 0x6a, 0xa1, 0x14,
	0x2a, 0xbf, 0x58, 0x83, 0x51, 0x48, 0x8f, 0x8b, 0xcd, 0xb1, 0xa4, 0x24, 0x31, 0x39, 0x43, 0x48,
	0x00, 0x2a, 0x07, 0xe1, 0x82, 0x54, 0xa3, 0x8b, 0x14, 0x1b, 0x30, 0x0a, 0x19, 0x71, 0x71, 0xc0,
	0xdc, 0x21, 0x24, 0x04, 0x95, 0x47, 0x72, 0xa7, 0x14, 0xa6, 0x58, 0x71, 0x12, 0x1b, 0xd8, 0x47,
	0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x17, 0x61, 0xcb, 0xa3, 0x00, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// NodeClient is the client API for Node service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NodeClient interface {
	Send(ctx context.Context, opts ...grpc.CallOption) (Node_SendClient, error)
	Attach(ctx context.Context, in *AttachReq, opts ...grpc.CallOption) (Node_AttachClient, error)
	Discover(ctx context.Context, in *DiscoverReq, opts ...grpc.CallOption) (*DiscoverRes, error)
}

type nodeClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeClient(cc grpc.ClientConnInterface) NodeClient {
	return &nodeClient{cc}
}

func (c *nodeClient) Send(ctx context.Context, opts ...grpc.CallOption) (Node_SendClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Node_serviceDesc.Streams[0], "/buffs.Node/Send", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeSendClient{stream}
	return x, nil
}

type Node_SendClient interface {
	Send(*SendReq) error
	CloseAndRecv() (*SendRes, error)
	grpc.ClientStream
}

type nodeSendClient struct {
	grpc.ClientStream
}

func (x *nodeSendClient) Send(m *SendReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *nodeSendClient) CloseAndRecv() (*SendRes, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SendRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodeClient) Attach(ctx context.Context, in *AttachReq, opts ...grpc.CallOption) (Node_AttachClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Node_serviceDesc.Streams[1], "/buffs.Node/Attach", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeAttachClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Node_AttachClient interface {
	Recv() (*AttachRes, error)
	grpc.ClientStream
}

type nodeAttachClient struct {
	grpc.ClientStream
}

func (x *nodeAttachClient) Recv() (*AttachRes, error) {
	m := new(AttachRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodeClient) Discover(ctx context.Context, in *DiscoverReq, opts ...grpc.CallOption) (*DiscoverRes, error) {
	out := new(DiscoverRes)
	err := c.cc.Invoke(ctx, "/buffs.Node/Discover", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeServer is the server API for Node service.
type NodeServer interface {
	Send(Node_SendServer) error
	Attach(*AttachReq, Node_AttachServer) error
	Discover(context.Context, *DiscoverReq) (*DiscoverRes, error)
}

// UnimplementedNodeServer can be embedded to have forward compatible implementations.
type UnimplementedNodeServer struct {
}

func (*UnimplementedNodeServer) Send(srv Node_SendServer) error {
	return status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (*UnimplementedNodeServer) Attach(req *AttachReq, srv Node_AttachServer) error {
	return status.Errorf(codes.Unimplemented, "method Attach not implemented")
}
func (*UnimplementedNodeServer) Discover(ctx context.Context, req *DiscoverReq) (*DiscoverRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Discover not implemented")
}

func RegisterNodeServer(s *grpc.Server, srv NodeServer) {
	s.RegisterService(&_Node_serviceDesc, srv)
}

func _Node_Send_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NodeServer).Send(&nodeSendServer{stream})
}

type Node_SendServer interface {
	SendAndClose(*SendRes) error
	Recv() (*SendReq, error)
	grpc.ServerStream
}

type nodeSendServer struct {
	grpc.ServerStream
}

func (x *nodeSendServer) SendAndClose(m *SendRes) error {
	return x.ServerStream.SendMsg(m)
}

func (x *nodeSendServer) Recv() (*SendReq, error) {
	m := new(SendReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Node_Attach_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AttachReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodeServer).Attach(m, &nodeAttachServer{stream})
}

type Node_AttachServer interface {
	Send(*AttachRes) error
	grpc.ServerStream
}

type nodeAttachServer struct {
	grpc.ServerStream
}

func (x *nodeAttachServer) Send(m *AttachRes) error {
	return x.ServerStream.SendMsg(m)
}

func _Node_Discover_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscoverReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).Discover(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buffs.Node/Discover",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).Discover(ctx, req.(*DiscoverReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Node_serviceDesc = grpc.ServiceDesc{
	ServiceName: "buffs.Node",
	HandlerType: (*NodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Discover",
			Handler:    _Node_Discover_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Send",
			Handler:       _Node_Send_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Attach",
			Handler:       _Node_Attach_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "node.proto",
}
