// Code generated by protoc-gen-go. DO NOT EDIT.
// source: node.proto

package buffs

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Message struct {
	Contents             []byte   `protobuf:"bytes,1,opt,name=contents,proto3" json:"contents,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c843d59d2d938e7, []int{0}
}

func (m *Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Message.Unmarshal(m, b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Message.Marshal(b, m, deterministic)
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return xxx_messageInfo_Message.Size(m)
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetContents() []byte {
	if m != nil {
		return m.Contents
	}
	return nil
}

type PublishReq struct {
	Route                string   `protobuf:"bytes,1,opt,name=route,proto3" json:"route,omitempty"`
	Contents             []byte   `protobuf:"bytes,2,opt,name=contents,proto3" json:"contents,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PublishReq) Reset()         { *m = PublishReq{} }
func (m *PublishReq) String() string { return proto.CompactTextString(m) }
func (*PublishReq) ProtoMessage()    {}
func (*PublishReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c843d59d2d938e7, []int{1}
}

func (m *PublishReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublishReq.Unmarshal(m, b)
}
func (m *PublishReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublishReq.Marshal(b, m, deterministic)
}
func (m *PublishReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublishReq.Merge(m, src)
}
func (m *PublishReq) XXX_Size() int {
	return xxx_messageInfo_PublishReq.Size(m)
}
func (m *PublishReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PublishReq.DiscardUnknown(m)
}

var xxx_messageInfo_PublishReq proto.InternalMessageInfo

func (m *PublishReq) GetRoute() string {
	if m != nil {
		return m.Route
	}
	return ""
}

func (m *PublishReq) GetContents() []byte {
	if m != nil {
		return m.Contents
	}
	return nil
}

type PublishRes struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PublishRes) Reset()         { *m = PublishRes{} }
func (m *PublishRes) String() string { return proto.CompactTextString(m) }
func (*PublishRes) ProtoMessage()    {}
func (*PublishRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c843d59d2d938e7, []int{2}
}

func (m *PublishRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublishRes.Unmarshal(m, b)
}
func (m *PublishRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublishRes.Marshal(b, m, deterministic)
}
func (m *PublishRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublishRes.Merge(m, src)
}
func (m *PublishRes) XXX_Size() int {
	return xxx_messageInfo_PublishRes.Size(m)
}
func (m *PublishRes) XXX_DiscardUnknown() {
	xxx_messageInfo_PublishRes.DiscardUnknown(m)
}

var xxx_messageInfo_PublishRes proto.InternalMessageInfo

type SubscribeReq struct {
	// id is a requested ID only; no gaurantee
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// route is a requested route; the server can kick it back
	Route                string   `protobuf:"bytes,2,opt,name=route,proto3" json:"route,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscribeReq) Reset()         { *m = SubscribeReq{} }
func (m *SubscribeReq) String() string { return proto.CompactTextString(m) }
func (*SubscribeReq) ProtoMessage()    {}
func (*SubscribeReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c843d59d2d938e7, []int{3}
}

func (m *SubscribeReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeReq.Unmarshal(m, b)
}
func (m *SubscribeReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeReq.Marshal(b, m, deterministic)
}
func (m *SubscribeReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeReq.Merge(m, src)
}
func (m *SubscribeReq) XXX_Size() int {
	return xxx_messageInfo_SubscribeReq.Size(m)
}
func (m *SubscribeReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeReq.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeReq proto.InternalMessageInfo

func (m *SubscribeReq) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *SubscribeReq) GetRoute() string {
	if m != nil {
		return m.Route
	}
	return ""
}

type SubscribeRes struct {
	Message              *Message `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscribeRes) Reset()         { *m = SubscribeRes{} }
func (m *SubscribeRes) String() string { return proto.CompactTextString(m) }
func (*SubscribeRes) ProtoMessage()    {}
func (*SubscribeRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c843d59d2d938e7, []int{4}
}

func (m *SubscribeRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeRes.Unmarshal(m, b)
}
func (m *SubscribeRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeRes.Marshal(b, m, deterministic)
}
func (m *SubscribeRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeRes.Merge(m, src)
}
func (m *SubscribeRes) XXX_Size() int {
	return xxx_messageInfo_SubscribeRes.Size(m)
}
func (m *SubscribeRes) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeRes.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeRes proto.InternalMessageInfo

func (m *SubscribeRes) GetMessage() *Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func init() {
	proto.RegisterType((*Message)(nil), "buffs.Message")
	proto.RegisterType((*PublishReq)(nil), "buffs.PublishReq")
	proto.RegisterType((*PublishRes)(nil), "buffs.PublishRes")
	proto.RegisterType((*SubscribeReq)(nil), "buffs.SubscribeReq")
	proto.RegisterType((*SubscribeRes)(nil), "buffs.SubscribeRes")
}

func init() {
	proto.RegisterFile("node.proto", fileDescriptor_0c843d59d2d938e7)
}

var fileDescriptor_0c843d59d2d938e7 = []byte{
	// 219 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0xcd, 0x4a, 0x04, 0x31,
	0x10, 0x84, 0x49, 0x70, 0x1d, 0xb7, 0x1d, 0x16, 0x6c, 0x3d, 0xc8, 0x9c, 0x24, 0x20, 0xcc, 0x69,
	0xd0, 0x55, 0xd0, 0x93, 0x6f, 0xa0, 0x48, 0x7c, 0x02, 0xb3, 0xe9, 0xd5, 0x80, 0x4e, 0x34, 0x9d,
	0xbc, 0xbf, 0x98, 0x8d, 0xf3, 0xa3, 0x1e, 0xbb, 0x53, 0x5f, 0xa5, 0xaa, 0x01, 0x7a, 0x6f, 0xa9,
	0xfb, 0x08, 0x3e, 0x7a, 0x5c, 0x98, 0xb4, 0xdd, 0xb2, 0x3a, 0x87, 0xea, 0x9e, 0x98, 0x9f, 0x5f,
	0x08, 0x1b, 0x38, 0xd8, 0xf8, 0x3e, 0x52, 0x1f, 0xf9, 0x54, 0x9c, 0x89, 0xb6, 0xd6, 0xc3, 0xac,
	0xee, 0x00, 0x1e, 0x93, 0x79, 0x73, 0xfc, 0xaa, 0xe9, 0x13, 0x4f, 0x60, 0x11, 0x7c, 0x8a, 0x94,
	0x65, 0x4b, 0xbd, 0x1b, 0x66, 0xbc, 0xfc, 0xc5, 0xd7, 0x13, 0x9e, 0xd5, 0x35, 0xd4, 0x4f, 0xc9,
	0xf0, 0x26, 0x38, 0x43, 0xdf, 0x7e, 0x2b, 0x90, 0xce, 0x16, 0x33, 0xe9, 0xec, 0xe8, 0x2f, 0x27,
	0xfe, 0xea, 0x76, 0x46, 0x31, 0xb6, 0x50, 0xbd, 0xef, 0xa2, 0x67, 0xf4, 0x70, 0xbd, 0xea, 0x72,
	0xa7, 0xae, 0x14, 0xd2, 0x3f, 0xcf, 0xeb, 0x00, 0x7b, 0x0f, 0xde, 0x12, 0x5e, 0x42, 0x55, 0x52,
	0xe0, 0x51, 0xd1, 0x8e, 0xad, 0x9a, 0x3f, 0x2b, 0x6e, 0x05, 0xde, 0xc0, 0x72, 0xf8, 0x14, 0x8f,
	0x8b, 0x62, 0x1a, 0xbe, 0xf9, 0x67, 0xc9, 0x17, 0xc2, 0xec, 0xe7, 0x33, 0x5f, 0x7d, 0x05, 0x00,
	0x00, 0xff, 0xff, 0xf6, 0x1c, 0x52, 0xd1, 0x74, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// NodeClient is the client API for Node service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NodeClient interface {
	Publish(ctx context.Context, opts ...grpc.CallOption) (Node_PublishClient, error)
	Subscribe(ctx context.Context, in *SubscribeReq, opts ...grpc.CallOption) (Node_SubscribeClient, error)
}

type nodeClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeClient(cc grpc.ClientConnInterface) NodeClient {
	return &nodeClient{cc}
}

func (c *nodeClient) Publish(ctx context.Context, opts ...grpc.CallOption) (Node_PublishClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Node_serviceDesc.Streams[0], "/buffs.Node/Publish", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodePublishClient{stream}
	return x, nil
}

type Node_PublishClient interface {
	Send(*PublishReq) error
	CloseAndRecv() (*PublishRes, error)
	grpc.ClientStream
}

type nodePublishClient struct {
	grpc.ClientStream
}

func (x *nodePublishClient) Send(m *PublishReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *nodePublishClient) CloseAndRecv() (*PublishRes, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(PublishRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodeClient) Subscribe(ctx context.Context, in *SubscribeReq, opts ...grpc.CallOption) (Node_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Node_serviceDesc.Streams[1], "/buffs.Node/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Node_SubscribeClient interface {
	Recv() (*SubscribeRes, error)
	grpc.ClientStream
}

type nodeSubscribeClient struct {
	grpc.ClientStream
}

func (x *nodeSubscribeClient) Recv() (*SubscribeRes, error) {
	m := new(SubscribeRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NodeServer is the server API for Node service.
type NodeServer interface {
	Publish(Node_PublishServer) error
	Subscribe(*SubscribeReq, Node_SubscribeServer) error
}

// UnimplementedNodeServer can be embedded to have forward compatible implementations.
type UnimplementedNodeServer struct {
}

func (*UnimplementedNodeServer) Publish(srv Node_PublishServer) error {
	return status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (*UnimplementedNodeServer) Subscribe(req *SubscribeReq, srv Node_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}

func RegisterNodeServer(s *grpc.Server, srv NodeServer) {
	s.RegisterService(&_Node_serviceDesc, srv)
}

func _Node_Publish_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NodeServer).Publish(&nodePublishServer{stream})
}

type Node_PublishServer interface {
	SendAndClose(*PublishRes) error
	Recv() (*PublishReq, error)
	grpc.ServerStream
}

type nodePublishServer struct {
	grpc.ServerStream
}

func (x *nodePublishServer) SendAndClose(m *PublishRes) error {
	return x.ServerStream.SendMsg(m)
}

func (x *nodePublishServer) Recv() (*PublishReq, error) {
	m := new(PublishReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Node_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodeServer).Subscribe(m, &nodeSubscribeServer{stream})
}

type Node_SubscribeServer interface {
	Send(*SubscribeRes) error
	grpc.ServerStream
}

type nodeSubscribeServer struct {
	grpc.ServerStream
}

func (x *nodeSubscribeServer) Send(m *SubscribeRes) error {
	return x.ServerStream.SendMsg(m)
}

var _Node_serviceDesc = grpc.ServiceDesc{
	ServiceName: "buffs.Node",
	HandlerType: (*NodeServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Publish",
			Handler:       _Node_Publish_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _Node_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "node.proto",
}
