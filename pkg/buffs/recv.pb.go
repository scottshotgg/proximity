// Code generated by protoc-gen-go. DO NOT EDIT.
// source: recv.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type OpenReq struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OpenReq) Reset()         { *m = OpenReq{} }
func (m *OpenReq) String() string { return proto.CompactTextString(m) }
func (*OpenReq) ProtoMessage()    {}
func (*OpenReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_490983b71ca20843, []int{0}
}

func (m *OpenReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OpenReq.Unmarshal(m, b)
}
func (m *OpenReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OpenReq.Marshal(b, m, deterministic)
}
func (m *OpenReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpenReq.Merge(m, src)
}
func (m *OpenReq) XXX_Size() int {
	return xxx_messageInfo_OpenReq.Size(m)
}
func (m *OpenReq) XXX_DiscardUnknown() {
	xxx_messageInfo_OpenReq.DiscardUnknown(m)
}

var xxx_messageInfo_OpenReq proto.InternalMessageInfo

type OpenRes struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OpenRes) Reset()         { *m = OpenRes{} }
func (m *OpenRes) String() string { return proto.CompactTextString(m) }
func (*OpenRes) ProtoMessage()    {}
func (*OpenRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_490983b71ca20843, []int{1}
}

func (m *OpenRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OpenRes.Unmarshal(m, b)
}
func (m *OpenRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OpenRes.Marshal(b, m, deterministic)
}
func (m *OpenRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpenRes.Merge(m, src)
}
func (m *OpenRes) XXX_Size() int {
	return xxx_messageInfo_OpenRes.Size(m)
}
func (m *OpenRes) XXX_DiscardUnknown() {
	xxx_messageInfo_OpenRes.DiscardUnknown(m)
}

var xxx_messageInfo_OpenRes proto.InternalMessageInfo

type CloseReq struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CloseReq) Reset()         { *m = CloseReq{} }
func (m *CloseReq) String() string { return proto.CompactTextString(m) }
func (*CloseReq) ProtoMessage()    {}
func (*CloseReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_490983b71ca20843, []int{2}
}

func (m *CloseReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CloseReq.Unmarshal(m, b)
}
func (m *CloseReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CloseReq.Marshal(b, m, deterministic)
}
func (m *CloseReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloseReq.Merge(m, src)
}
func (m *CloseReq) XXX_Size() int {
	return xxx_messageInfo_CloseReq.Size(m)
}
func (m *CloseReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CloseReq.DiscardUnknown(m)
}

var xxx_messageInfo_CloseReq proto.InternalMessageInfo

type CloseRes struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CloseRes) Reset()         { *m = CloseRes{} }
func (m *CloseRes) String() string { return proto.CompactTextString(m) }
func (*CloseRes) ProtoMessage()    {}
func (*CloseRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_490983b71ca20843, []int{3}
}

func (m *CloseRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CloseRes.Unmarshal(m, b)
}
func (m *CloseRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CloseRes.Marshal(b, m, deterministic)
}
func (m *CloseRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloseRes.Merge(m, src)
}
func (m *CloseRes) XXX_Size() int {
	return xxx_messageInfo_CloseRes.Size(m)
}
func (m *CloseRes) XXX_DiscardUnknown() {
	xxx_messageInfo_CloseRes.DiscardUnknown(m)
}

var xxx_messageInfo_CloseRes proto.InternalMessageInfo

type RecvReq struct {
	Msg                  *Message `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RecvReq) Reset()         { *m = RecvReq{} }
func (m *RecvReq) String() string { return proto.CompactTextString(m) }
func (*RecvReq) ProtoMessage()    {}
func (*RecvReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_490983b71ca20843, []int{4}
}

func (m *RecvReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RecvReq.Unmarshal(m, b)
}
func (m *RecvReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RecvReq.Marshal(b, m, deterministic)
}
func (m *RecvReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecvReq.Merge(m, src)
}
func (m *RecvReq) XXX_Size() int {
	return xxx_messageInfo_RecvReq.Size(m)
}
func (m *RecvReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RecvReq.DiscardUnknown(m)
}

var xxx_messageInfo_RecvReq proto.InternalMessageInfo

func (m *RecvReq) GetMsg() *Message {
	if m != nil {
		return m.Msg
	}
	return nil
}

type RecvRes struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RecvRes) Reset()         { *m = RecvRes{} }
func (m *RecvRes) String() string { return proto.CompactTextString(m) }
func (*RecvRes) ProtoMessage()    {}
func (*RecvRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_490983b71ca20843, []int{5}
}

func (m *RecvRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RecvRes.Unmarshal(m, b)
}
func (m *RecvRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RecvRes.Marshal(b, m, deterministic)
}
func (m *RecvRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecvRes.Merge(m, src)
}
func (m *RecvRes) XXX_Size() int {
	return xxx_messageInfo_RecvRes.Size(m)
}
func (m *RecvRes) XXX_DiscardUnknown() {
	xxx_messageInfo_RecvRes.DiscardUnknown(m)
}

var xxx_messageInfo_RecvRes proto.InternalMessageInfo

func init() {
	proto.RegisterType((*OpenReq)(nil), "proto.OpenReq")
	proto.RegisterType((*OpenRes)(nil), "proto.OpenRes")
	proto.RegisterType((*CloseReq)(nil), "proto.CloseReq")
	proto.RegisterType((*CloseRes)(nil), "proto.CloseRes")
	proto.RegisterType((*RecvReq)(nil), "proto.RecvReq")
	proto.RegisterType((*RecvRes)(nil), "proto.RecvRes")
}

func init() { proto.RegisterFile("recv.proto", fileDescriptor_490983b71ca20843) }

var fileDescriptor_490983b71ca20843 = []byte{
	// 182 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2a, 0x4a, 0x4d, 0x2e,
	0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x53, 0x52, 0x7c, 0x39, 0x99, 0xc5, 0x25,
	0xa9, 0x79, 0xa9, 0x45, 0x10, 0x61, 0x25, 0x4e, 0x2e, 0x76, 0xff, 0x82, 0xd4, 0xbc, 0xa0, 0xd4,
	0x42, 0x04, 0xb3, 0x58, 0x89, 0x8b, 0x8b, 0xc3, 0x39, 0x27, 0xbf, 0x38, 0x15, 0x24, 0x8c, 0x60,
	0x17, 0x2b, 0x69, 0x73, 0xb1, 0x07, 0xa5, 0x26, 0x97, 0x05, 0xa5, 0x16, 0x0a, 0x29, 0x70, 0x31,
	0xe7, 0x16, 0xa7, 0x4b, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x1b, 0xf1, 0x41, 0x4c, 0xd3, 0xf3, 0x4d,
	0x2d, 0x2e, 0x4e, 0x4c, 0x4f, 0x0d, 0x02, 0x49, 0x81, 0xcc, 0x83, 0x28, 0x2e, 0x36, 0x6a, 0x67,
	0xe4, 0x62, 0x01, 0xb1, 0x85, 0x34, 0xb8, 0x58, 0x40, 0x76, 0x08, 0xc1, 0x34, 0x40, 0xed, 0x96,
	0x42, 0xe5, 0x17, 0x2b, 0x31, 0x08, 0x69, 0x73, 0xb1, 0x82, 0xad, 0x15, 0xe2, 0x87, 0x4a, 0xc1,
	0x1c, 0x24, 0x85, 0x26, 0x00, 0x52, 0xac, 0x01, 0x35, 0x1e, 0x66, 0x0c, 0xd4, 0x91, 0x52, 0xa8,
	0xfc, 0x62, 0x25, 0x86, 0x24, 0x36, 0xb0, 0x80, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0xe6, 0xad,
	0xec, 0xae, 0x1b, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RecvClient is the client API for Recv service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RecvClient interface {
	Open(ctx context.Context, in *OpenReq, opts ...grpc.CallOption) (*OpenRes, error)
	Close(ctx context.Context, in *CloseReq, opts ...grpc.CallOption) (*CloseRes, error)
	Recv(ctx context.Context, in *RecvReq, opts ...grpc.CallOption) (*RecvRes, error)
}

type recvClient struct {
	cc *grpc.ClientConn
}

func NewRecvClient(cc *grpc.ClientConn) RecvClient {
	return &recvClient{cc}
}

func (c *recvClient) Open(ctx context.Context, in *OpenReq, opts ...grpc.CallOption) (*OpenRes, error) {
	out := new(OpenRes)
	err := c.cc.Invoke(ctx, "/proto.Recv/Open", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recvClient) Close(ctx context.Context, in *CloseReq, opts ...grpc.CallOption) (*CloseRes, error) {
	out := new(CloseRes)
	err := c.cc.Invoke(ctx, "/proto.Recv/Close", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recvClient) Recv(ctx context.Context, in *RecvReq, opts ...grpc.CallOption) (*RecvRes, error) {
	out := new(RecvRes)
	err := c.cc.Invoke(ctx, "/proto.Recv/Recv", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecvServer is the server API for Recv service.
type RecvServer interface {
	Open(context.Context, *OpenReq) (*OpenRes, error)
	Close(context.Context, *CloseReq) (*CloseRes, error)
	Recv(context.Context, *RecvReq) (*RecvRes, error)
}

// UnimplementedRecvServer can be embedded to have forward compatible implementations.
type UnimplementedRecvServer struct {
}

func (*UnimplementedRecvServer) Open(ctx context.Context, req *OpenReq) (*OpenRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Open not implemented")
}
func (*UnimplementedRecvServer) Close(ctx context.Context, req *CloseReq) (*CloseRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Close not implemented")
}
func (*UnimplementedRecvServer) Recv(ctx context.Context, req *RecvReq) (*RecvRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Recv not implemented")
}

func RegisterRecvServer(s *grpc.Server, srv RecvServer) {
	s.RegisterService(&_Recv_serviceDesc, srv)
}

func _Recv_Open_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecvServer).Open(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Recv/Open",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecvServer).Open(ctx, req.(*OpenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recv_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecvServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Recv/Close",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecvServer).Close(ctx, req.(*CloseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recv_Recv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecvReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecvServer).Recv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Recv/Recv",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecvServer).Recv(ctx, req.(*RecvReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Recv_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Recv",
	HandlerType: (*RecvServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Open",
			Handler:    _Recv_Open_Handler,
		},
		{
			MethodName: "Close",
			Handler:    _Recv_Close_Handler,
		},
		{
			MethodName: "Recv",
			Handler:    _Recv_Recv_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "recv.proto",
}
